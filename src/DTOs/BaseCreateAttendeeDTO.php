<?php

// This is a autogenerated file:BaseCreateAttendeeDTO

class BaseCreateAttendeeDTO
{
    private string $schema; // json:$schema Required
    private string $type; // json:type Required
    private array $required; // json:required Required
    private Properties $properties; // json:properties Required
    private bool $additionalProperties; // json:additionalProperties Required

    /**
     * @param string $schema
     * @param string $type
     * @param array $required
     * @param Properties $properties
     * @param bool $additionalProperties
     */
    public function __construct(string $schema, string $type, array $required, Properties $properties, bool $additionalProperties)
    {
        $this->schema = $schema;
        $this->type = $type;
        $this->required = $required;
        $this->properties = $properties;
        $this->additionalProperties = $additionalProperties;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromSchema(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toSchema(): string
    {
        if (BaseCreateAttendeeDTO::validateSchema($this->schema)) {
            return $this->schema; /*string*/
        }
        throw new Exception('never get to this BaseCreateAttendeeDTO::schema');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateSchema(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BaseCreateAttendeeDTO::schema");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getSchema(): string
    {
        if (BaseCreateAttendeeDTO::validateSchema($this->schema)) {
            return $this->schema;
        }
        throw new Exception('never get to getSchema BaseCreateAttendeeDTO::schema');
    }

    /**
     * @return string
     */
    public static function sampleSchema(): string
    {
        return 'BaseCreateAttendeeDTO::schema::31'; /*31:schema*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromType(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toType(): string
    {
        if (BaseCreateAttendeeDTO::validateType($this->type)) {
            return $this->type; /*string*/
        }
        throw new Exception('never get to this BaseCreateAttendeeDTO::type');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateType(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:BaseCreateAttendeeDTO::type");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getType(): string
    {
        if (BaseCreateAttendeeDTO::validateType($this->type)) {
            return $this->type;
        }
        throw new Exception('never get to getType BaseCreateAttendeeDTO::type');
    }

    /**
     * @return string
     */
    public static function sampleType(): string
    {
        return 'BaseCreateAttendeeDTO::type::32'; /*32:type*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromRequired(array $value): array
    {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toRequired(): array
    {
        if (BaseCreateAttendeeDTO::validateRequired($this->required)) {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->required);
        }
        throw new Exception('never get to this BaseCreateAttendeeDTO::required');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateRequired(array $value): bool
    {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:BaseCreateAttendeeDTO::required");
        }
        array_walk($value, function ($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:BaseCreateAttendeeDTO::required");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getRequired(): array
    {
        if (BaseCreateAttendeeDTO::validateRequired($this->required)) {
            return $this->required;
        }
        throw new Exception('never get to getRequired BaseCreateAttendeeDTO::required');
    }

    /**
     * @return array
     */
    public static function sampleRequired(): array
    {
        return  array(
            'BaseCreateAttendeeDTO::::33' /*33:*/
        ); /* 33:required*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return Properties
     */
    public static function fromProperties(stdClass $value): Properties
    {
        return Properties::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toProperties(): stdClass
    {
        if (BaseCreateAttendeeDTO::validateProperties($this->properties)) {
            return $this->properties->to(); /*class*/
        }
        throw new Exception('never get to this BaseCreateAttendeeDTO::properties');
    }

    /**
     * @param Properties
     * @return bool
     * @throws Exception
     */
    public static function validateProperties(Properties $value): bool
    {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return Properties
     */
    public function getProperties(): Properties
    {
        if (BaseCreateAttendeeDTO::validateProperties($this->properties)) {
            return $this->properties;
        }
        throw new Exception('never get to getProperties BaseCreateAttendeeDTO::properties');
    }

    /**
     * @return Properties
     */
    public static function sampleProperties(): Properties
    {
        return Properties::sample(); /*34:properties*/
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromAdditionalProperties(bool $value): bool
    {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toAdditionalProperties(): bool
    {
        if (BaseCreateAttendeeDTO::validateAdditionalProperties($this->additionalProperties)) {
            return $this->additionalProperties; /*bool*/
        }
        throw new Exception('never get to this BaseCreateAttendeeDTO::additionalProperties');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateAdditionalProperties(bool $value): bool
    {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:BaseCreateAttendeeDTO::additionalProperties");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function getAdditionalProperties(): bool
    {
        if (BaseCreateAttendeeDTO::validateAdditionalProperties($this->additionalProperties)) {
            return $this->additionalProperties;
        }
        throw new Exception('never get to getAdditionalProperties BaseCreateAttendeeDTO::additionalProperties');
    }

    /**
     * @return bool
     */
    public static function sampleAdditionalProperties(): bool
    {
        return true; /*35:additionalProperties*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool
    {
        return BaseCreateAttendeeDTO::validateSchema($this->schema)
            || BaseCreateAttendeeDTO::validateType($this->type)
            || BaseCreateAttendeeDTO::validateRequired($this->required)
            || BaseCreateAttendeeDTO::validateProperties($this->properties)
            || BaseCreateAttendeeDTO::validateAdditionalProperties($this->additionalProperties);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass
    {
        $out = new stdClass();
        $out->{'$schema'} = $this->toSchema();
        $out->{'type'} = $this->toType();
        $out->{'required'} = $this->toRequired();
        $out->properties = $this->toProperties();
        $out->{'additionalProperties'} = $this->toAdditionalProperties();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return BaseCreateAttendeeDTO
     * @throws Exception
     */
    public static function from(stdClass $obj): BaseCreateAttendeeDTO
    {
        return new BaseCreateAttendeeDTO(
            BaseCreateAttendeeDTO::fromSchema($obj->{'$schema'}),
            BaseCreateAttendeeDTO::fromType($obj->{'type'}),
            BaseCreateAttendeeDTO::fromRequired($obj->{'required'}),
            BaseCreateAttendeeDTO::fromProperties($obj->{'properties'}),
            BaseCreateAttendeeDTO::fromAdditionalProperties($obj->{'additionalProperties'})
        );
    }

    /**
     * @return BaseCreateAttendeeDTO
     */
    public static function sample(): BaseCreateAttendeeDTO
    {
        return new BaseCreateAttendeeDTO(
            BaseCreateAttendeeDTO::sampleSchema(),
            BaseCreateAttendeeDTO::sampleType(),
            BaseCreateAttendeeDTO::sampleRequired(),
            BaseCreateAttendeeDTO::sampleProperties(),
            BaseCreateAttendeeDTO::sampleAdditionalProperties()
        );
    }
}

// This is a autogenerated file:Properties

class Properties
{
    private StName $firstName; // json:firstName Required
    private StName $lastName; // json:lastName Required
    private DateOfBirth $email; // json:email Required
    private DateOfBirth $dateOfBirth; // json:dateOfBirth Required
    private City $city; // json:city Required
    private IsActive $isActive; // json:isActive Required

    /**
     * @param StName $firstName
     * @param StName $lastName
     * @param DateOfBirth $email
     * @param DateOfBirth $dateOfBirth
     * @param City $city
     * @param IsActive $isActive
     */
    public function __construct(StName $firstName, StName $lastName, DateOfBirth $email, DateOfBirth $dateOfBirth, City $city, IsActive $isActive)
    {
        $this->firstName = $firstName;
        $this->lastName = $lastName;
        $this->email = $email;
        $this->dateOfBirth = $dateOfBirth;
        $this->city = $city;
        $this->isActive = $isActive;
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return StName
     */
    public static function fromFirstName(stdClass $value): StName
    {
        return StName::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toFirstName(): stdClass
    {
        if (Properties::validateFirstName($this->firstName)) {
            return $this->firstName->to(); /*class*/
        }
        throw new Exception('never get to this Properties::firstName');
    }

    /**
     * @param StName
     * @return bool
     * @throws Exception
     */
    public static function validateFirstName(StName $value): bool
    {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return StName
     */
    public function getFirstName(): StName
    {
        if (Properties::validateFirstName($this->firstName)) {
            return $this->firstName;
        }
        throw new Exception('never get to getFirstName Properties::firstName');
    }

    /**
     * @return StName
     */
    public static function sampleFirstName(): StName
    {
        return StName::sample(); /*31:firstName*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return StName
     */
    public static function fromLastName(stdClass $value): StName
    {
        return StName::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toLastName(): stdClass
    {
        if (Properties::validateLastName($this->lastName)) {
            return $this->lastName->to(); /*class*/
        }
        throw new Exception('never get to this Properties::lastName');
    }

    /**
     * @param StName
     * @return bool
     * @throws Exception
     */
    public static function validateLastName(StName $value): bool
    {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return StName
     */
    public function getLastName(): StName
    {
        if (Properties::validateLastName($this->lastName)) {
            return $this->lastName;
        }
        throw new Exception('never get to getLastName Properties::lastName');
    }

    /**
     * @return StName
     */
    public static function sampleLastName(): StName
    {
        return StName::sample(); /*32:lastName*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return DateOfBirth
     */
    public static function fromEmail(stdClass $value): DateOfBirth
    {
        return DateOfBirth::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toEmail(): stdClass
    {
        if (Properties::validateEmail($this->email)) {
            return $this->email->to(); /*class*/
        }
        throw new Exception('never get to this Properties::email');
    }

    /**
     * @param DateOfBirth
     * @return bool
     * @throws Exception
     */
    public static function validateEmail(DateOfBirth $value): bool
    {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return DateOfBirth
     */
    public function getEmail(): DateOfBirth
    {
        if (Properties::validateEmail($this->email)) {
            return $this->email;
        }
        throw new Exception('never get to getEmail Properties::email');
    }

    /**
     * @return DateOfBirth
     */
    public static function sampleEmail(): DateOfBirth
    {
        return DateOfBirth::sample(); /*33:email*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return DateOfBirth
     */
    public static function fromDateOfBirth(stdClass $value): DateOfBirth
    {
        return DateOfBirth::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toDateOfBirth(): stdClass
    {
        if (Properties::validateDateOfBirth($this->dateOfBirth)) {
            return $this->dateOfBirth->to(); /*class*/
        }
        throw new Exception('never get to this Properties::dateOfBirth');
    }

    /**
     * @param DateOfBirth
     * @return bool
     * @throws Exception
     */
    public static function validateDateOfBirth(DateOfBirth $value): bool
    {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return DateOfBirth
     */
    public function getDateOfBirth(): DateOfBirth
    {
        if (Properties::validateDateOfBirth($this->dateOfBirth)) {
            return $this->dateOfBirth;
        }
        throw new Exception('never get to getDateOfBirth Properties::dateOfBirth');
    }

    /**
     * @return DateOfBirth
     */
    public static function sampleDateOfBirth(): DateOfBirth
    {
        return DateOfBirth::sample(); /*34:dateOfBirth*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return City
     */
    public static function fromCity(stdClass $value): City
    {
        return City::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toCity(): stdClass
    {
        if (Properties::validateCity($this->city)) {
            return $this->city->to(); /*class*/
        }
        throw new Exception('never get to this Properties::city');
    }

    /**
     * @param City
     * @return bool
     * @throws Exception
     */
    public static function validateCity(City $value): bool
    {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return City
     */
    public function getCity(): City
    {
        if (Properties::validateCity($this->city)) {
            return $this->city;
        }
        throw new Exception('never get to getCity Properties::city');
    }

    /**
     * @return City
     */
    public static function sampleCity(): City
    {
        return City::sample(); /*35:city*/
    }

    /**
     * @param stdClass $value
     * @throws Exception
     * @return IsActive
     */
    public static function fromIsActive(stdClass $value): IsActive
    {
        return IsActive::from($value); /*class*/
    }

    /**
     * @throws Exception
     * @return stdClass
     */
    public function toIsActive(): stdClass
    {
        if (Properties::validateIsActive($this->isActive)) {
            return $this->isActive->to(); /*class*/
        }
        throw new Exception('never get to this Properties::isActive');
    }

    /**
     * @param IsActive
     * @return bool
     * @throws Exception
     */
    public static function validateIsActive(IsActive $value): bool
    {
        $value->validate();
        return true;
    }

    /**
     * @throws Exception
     * @return IsActive
     */
    public function getIsActive(): IsActive
    {
        if (Properties::validateIsActive($this->isActive)) {
            return $this->isActive;
        }
        throw new Exception('never get to getIsActive Properties::isActive');
    }

    /**
     * @return IsActive
     */
    public static function sampleIsActive(): IsActive
    {
        return IsActive::sample(); /*36:isActive*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool
    {
        return Properties::validateFirstName($this->firstName)
            || Properties::validateLastName($this->lastName)
            || Properties::validateEmail($this->email)
            || Properties::validateDateOfBirth($this->dateOfBirth)
            || Properties::validateCity($this->city)
            || Properties::validateIsActive($this->isActive);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass
    {
        $out = new stdClass();
        $out->{'firstName'} = $this->toFirstName();
        $out->{'lastName'} = $this->toLastName();
        $out->{'email'} = $this->toEmail();
        $out->{'dateOfBirth'} = $this->toDateOfBirth();
        $out->{'city'} = $this->toCity();
        $out->{'isActive'} = $this->toIsActive();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Properties
     * @throws Exception
     */
    public static function from(stdClass $obj): Properties
    {
        return new Properties(
            Properties::fromFirstName($obj->{'firstName'}),
            Properties::fromLastName($obj->{'lastName'}),
            Properties::fromEmail($obj->{'email'}),
            Properties::fromDateOfBirth($obj->{'dateOfBirth'}),
            Properties::fromCity($obj->{'city'}),
            Properties::fromIsActive($obj->{'isActive'})
        );
    }

    /**
     * @return Properties
     */
    public static function sample(): Properties
    {
        return new Properties(
            Properties::sampleFirstName(),
            Properties::sampleLastName(),
            Properties::sampleEmail(),
            Properties::sampleDateOfBirth(),
            Properties::sampleCity(),
            Properties::sampleIsActive()
        );
    }
}

// This is a autogenerated file:City

class City
{
    private string $type; // json:type Required
    private int $minLength; // json:minLength Required

    /**
     * @param string $type
     * @param int $minLength
     */
    public function __construct(string $type, int $minLength)
    {
        $this->type = $type;
        $this->minLength = $minLength;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromType(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toType(): string
    {
        if (City::validateType($this->type)) {
            return $this->type; /*string*/
        }
        throw new Exception('never get to this City::type');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateType(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:City::type");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getType(): string
    {
        if (City::validateType($this->type)) {
            return $this->type;
        }
        throw new Exception('never get to getType City::type');
    }

    /**
     * @return string
     */
    public static function sampleType(): string
    {
        return 'City::type::31'; /*31:type*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromMinLength(int $value): int
    {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toMinLength(): int
    {
        if (City::validateMinLength($this->minLength)) {
            return $this->minLength; /*int*/
        }
        throw new Exception('never get to this City::minLength');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateMinLength(int $value): bool
    {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:City::minLength");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getMinLength(): int
    {
        if (City::validateMinLength($this->minLength)) {
            return $this->minLength;
        }
        throw new Exception('never get to getMinLength City::minLength');
    }

    /**
     * @return int
     */
    public static function sampleMinLength(): int
    {
        return 32; /*32:minLength*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool
    {
        return City::validateType($this->type)
            || City::validateMinLength($this->minLength);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass
    {
        $out = new stdClass();
        $out->{'type'} = $this->toType();
        $out->{'minLength'} = $this->toMinLength();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return City
     * @throws Exception
     */
    public static function from(stdClass $obj): City
    {
        return new City(
            City::fromType($obj->{'type'}),
            City::fromMinLength($obj->{'minLength'})
        );
    }

    /**
     * @return City
     */
    public static function sample(): City
    {
        return new City(
            City::sampleType(),
            City::sampleMinLength()
        );
    }
}

// This is a autogenerated file:DateOfBirth

class DateOfBirth
{
    private string $type; // json:type Required
    private string $format; // json:format Required

    /**
     * @param string $type
     * @param string $format
     */
    public function __construct(string $type, string $format)
    {
        $this->type = $type;
        $this->format = $format;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromType(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toType(): string
    {
        if (DateOfBirth::validateType($this->type)) {
            return $this->type; /*string*/
        }
        throw new Exception('never get to this DateOfBirth::type');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateType(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:DateOfBirth::type");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getType(): string
    {
        if (DateOfBirth::validateType($this->type)) {
            return $this->type;
        }
        throw new Exception('never get to getType DateOfBirth::type');
    }

    /**
     * @return string
     */
    public static function sampleType(): string
    {
        return 'DateOfBirth::type::31'; /*31:type*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromFormat(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toFormat(): string
    {
        if (DateOfBirth::validateFormat($this->format)) {
            return $this->format; /*string*/
        }
        throw new Exception('never get to this DateOfBirth::format');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateFormat(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:DateOfBirth::format");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getFormat(): string
    {
        if (DateOfBirth::validateFormat($this->format)) {
            return $this->format;
        }
        throw new Exception('never get to getFormat DateOfBirth::format');
    }

    /**
     * @return string
     */
    public static function sampleFormat(): string
    {
        return 'DateOfBirth::format::32'; /*32:format*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool
    {
        return DateOfBirth::validateType($this->type)
            || DateOfBirth::validateFormat($this->format);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass
    {
        $out = new stdClass();
        $out->{'type'} = $this->toType();
        $out->{'format'} = $this->toFormat();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return DateOfBirth
     * @throws Exception
     */
    public static function from(stdClass $obj): DateOfBirth
    {
        return new DateOfBirth(
            DateOfBirth::fromType($obj->{'type'}),
            DateOfBirth::fromFormat($obj->{'format'})
        );
    }

    /**
     * @return DateOfBirth
     */
    public static function sample(): DateOfBirth
    {
        return new DateOfBirth(
            DateOfBirth::sampleType(),
            DateOfBirth::sampleFormat()
        );
    }
}

// This is a autogenerated file:StName

class StName
{
    private string $type; // json:type Required
    private int $minLength; // json:minLength Required
    private int $maxLength; // json:maxLength Required

    /**
     * @param string $type
     * @param int $minLength
     * @param int $maxLength
     */
    public function __construct(string $type, int $minLength, int $maxLength)
    {
        $this->type = $type;
        $this->minLength = $minLength;
        $this->maxLength = $maxLength;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromType(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toType(): string
    {
        if (StName::validateType($this->type)) {
            return $this->type; /*string*/
        }
        throw new Exception('never get to this StName::type');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateType(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:StName::type");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getType(): string
    {
        if (StName::validateType($this->type)) {
            return $this->type;
        }
        throw new Exception('never get to getType StName::type');
    }

    /**
     * @return string
     */
    public static function sampleType(): string
    {
        return 'StName::type::31'; /*31:type*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromMinLength(int $value): int
    {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toMinLength(): int
    {
        if (StName::validateMinLength($this->minLength)) {
            return $this->minLength; /*int*/
        }
        throw new Exception('never get to this StName::minLength');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateMinLength(int $value): bool
    {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:StName::minLength");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getMinLength(): int
    {
        if (StName::validateMinLength($this->minLength)) {
            return $this->minLength;
        }
        throw new Exception('never get to getMinLength StName::minLength');
    }

    /**
     * @return int
     */
    public static function sampleMinLength(): int
    {
        return 32; /*32:minLength*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromMaxLength(int $value): int
    {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toMaxLength(): int
    {
        if (StName::validateMaxLength($this->maxLength)) {
            return $this->maxLength; /*int*/
        }
        throw new Exception('never get to this StName::maxLength');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateMaxLength(int $value): bool
    {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:StName::maxLength");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getMaxLength(): int
    {
        if (StName::validateMaxLength($this->maxLength)) {
            return $this->maxLength;
        }
        throw new Exception('never get to getMaxLength StName::maxLength');
    }

    /**
     * @return int
     */
    public static function sampleMaxLength(): int
    {
        return 33; /*33:maxLength*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool
    {
        return StName::validateType($this->type)
            || StName::validateMinLength($this->minLength)
            || StName::validateMaxLength($this->maxLength);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass
    {
        $out = new stdClass();
        $out->{'type'} = $this->toType();
        $out->{'minLength'} = $this->toMinLength();
        $out->{'maxLength'} = $this->toMaxLength();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return StName
     * @throws Exception
     */
    public static function from(stdClass $obj): StName
    {
        return new StName(
            StName::fromType($obj->{'type'}),
            StName::fromMinLength($obj->{'minLength'}),
            StName::fromMaxLength($obj->{'maxLength'})
        );
    }

    /**
     * @return StName
     */
    public static function sample(): StName
    {
        return new StName(
            StName::sampleType(),
            StName::sampleMinLength(),
            StName::sampleMaxLength()
        );
    }
}

// This is a autogenerated file:IsActive

class IsActive
{
    private string $type; // json:type Required
    private bool $default; // json:default Required

    /**
     * @param string $type
     * @param bool $default
     */
    public function __construct(string $type, bool $default)
    {
        $this->type = $type;
        $this->default = $default;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromType(string $value): string
    {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toType(): string
    {
        if (IsActive::validateType($this->type)) {
            return $this->type; /*string*/
        }
        throw new Exception('never get to this IsActive::type');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateType(string $value): bool
    {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:IsActive::type");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getType(): string
    {
        if (IsActive::validateType($this->type)) {
            return $this->type;
        }
        throw new Exception('never get to getType IsActive::type');
    }

    /**
     * @return string
     */
    public static function sampleType(): string
    {
        return 'IsActive::type::31'; /*31:type*/
    }

    /**
     * @param bool $value
     * @throws Exception
     * @return bool
     */
    public static function fromDefault(bool $value): bool
    {
        return $value; /*bool*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function toDefault(): bool
    {
        if (IsActive::validateDefault($this->default)) {
            return $this->default; /*bool*/
        }
        throw new Exception('never get to this IsActive::default');
    }

    /**
     * @param bool
     * @return bool
     * @throws Exception
     */
    public static function validateDefault(bool $value): bool
    {
        if (!is_bool($value)) {
            throw new Exception("Attribute Error:IsActive::default");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function getDefault(): bool
    {
        if (IsActive::validateDefault($this->default)) {
            return $this->default;
        }
        throw new Exception('never get to getDefault IsActive::default');
    }

    /**
     * @return bool
     */
    public static function sampleDefault(): bool
    {
        return true; /*32:default*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool
    {
        return IsActive::validateType($this->type)
            || IsActive::validateDefault($this->default);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass
    {
        $out = new stdClass();
        $out->{'type'} = $this->toType();
        $out->{'default'} = $this->toDefault();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return IsActive
     * @throws Exception
     */
    public static function from(stdClass $obj): IsActive
    {
        return new IsActive(
            IsActive::fromType($obj->{'type'}),
            IsActive::fromDefault($obj->{'default'})
        );
    }

    /**
     * @return IsActive
     */
    public static function sample(): IsActive
    {
        return new IsActive(
            IsActive::sampleType(),
            IsActive::sampleDefault()
        );
    }
}
